package dk.trustworks.aggregaterservice.repository;

import dk.trustworks.aggregaterservice.model.WorkItem;
import io.reactivex.Single;
import io.vertx.ext.sql.SQLOptions;
import io.vertx.reactivex.ext.jdbc.JDBCClient;
import io.vertx.reactivex.ext.sql.SQLConnection;

import java.util.List;
import java.util.stream.Collectors;

public class WorkItemsRepository {

    private JDBCClient jdbc;

    public WorkItemsRepository(JDBCClient jdbc) {
        this.jdbc = jdbc;
    }

    private Single<SQLConnection> connect() {
        return jdbc.rxGetConnection()
                .map(c -> c.setOptions(new SQLOptions().setAutoGeneratedKeys(true)));
    }

    public Single<List<WorkItem>> getAllWork() {
        String sql = "select w.id, w.registered, w.workduration, w.useruuid, w.workas, cc.rate, t.uuid as taskuuid, p.uuid as projectuuid, c.uuid as clientuuid from " +
                "            work as w " +
                "            inner join task t on w.taskuuid = t.uuid " +
                "            inner join project p on t.projectuuid = p.uuid " +
                "            inner join contract_project cp on p.uuid = cp.projectuuid " +
                "            inner join contracts c on cp.contractuuid = c.uuid " +
                "            inner join contract_consultants cc on c.uuid = cc.contractuuid and w.useruuid = cc.useruuid " +
                "            where c.activefrom <= registered and c.activeto >= registered " +
                "            and  w.registered >= '2014-02-01' AND w.registered < '2019-12-31' " +
                "            and w.workduration > 0 and c.status in ('TIME', 'SIGNED', 'CLOSED') " +
                "            and cc.rate > 0.0 ";

        return connect().flatMap((SQLConnection connection) -> connection.rxQuery(sql)
                .map(rs -> rs.getRows().stream().map(WorkItem::new).collect(Collectors.toList()))
                .doFinally(connection::close));
    }
}
